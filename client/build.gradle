import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    repositories {
        maven { url maven_typescript_gradle_plugin_repo_url }
        maven { url maven_main_repo_url }
    }
    dependencies {
        classpath "de.richsource.gradle.plugins:typescript-gradle-plugin:$typescript_gradle_plugin_version"
    }
}
ext {
    clientBuildDir = "$project.buildDir/dist"
}

apply plugin: "typescript"

def tsTmpDir = "$project.buildDir/tstmp"
def jsDir = clientBuildDir + "/js"
def separator = File.separator
def npmModulesBinDir = project.projectDir.toString() + separator + "node_modules" + separator + ".bin" + separator
def skipInstallClientDependencies = project.hasProperty("skipInstallClientDependencies")

task npmInstall(type: Exec) {
    commandLine = osCmd() + ["npm", "install"]
    enabled = !skipInstallClientDependencies
}

task copyTypeScriptSources(type: Copy) {
    from "src/main/ts"
    into tsTmpDir
}

task tsdInstall(dependsOn: "npmInstall", type: Exec) {
    commandLine = osCmd() + [npmModulesBinDir + "tsd", "reinstall"]
    enabled = !skipInstallClientDependencies
}

task bowerInstall(dependsOn: "npmInstall", type: Exec) {
    commandLine = osCmd() + [npmModulesBinDir + "bower", "install"]
    enabled = !skipInstallClientDependencies
}

task copyTypeScriptLibs(type: Copy) {
    from "extlibs/ts"
    into tsTmpDir + "/libs"
    dependsOn tsdInstall
}

task copyJavaScriptLibs(type: Copy) {
    from "extlibs/js"
    into jsDir + "/libs"
    dependsOn bowerInstall
}

compileTypeScript.dependsOn copyTypeScriptLibs, copyTypeScriptSources

compileTypeScript {
    sourcemap = true
    source = tsTmpDir
    target = "ES5"
    outputDir = file(jsDir)
    compilerExecutable = npmModulesBinDir + "tsc" + tscExecutableSuffix()
}


task build(dependsOn: ["compileTypeScript", "copyJavaScriptLibs"], type: Copy) {
    from "src/main/webapp"
    into clientBuildDir
}

task clean(type: Delete) {
    delete project.buildDir
}

def tscExecutableSuffix() {
    if (isWindows()) {
        return ".cmd"
    } else {
        return ""
    }
}

def osCmd() {
    if (isWindows()) {
        return ["cmd", "/c"]
    } else {
        return []
    }
}

def isWindows() {
    return Os.isFamily(Os.FAMILY_WINDOWS)
}
